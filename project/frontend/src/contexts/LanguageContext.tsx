import React, { createContext, useContext, useState, ReactNode } from 'react';

type Language = 'en' | 'hi';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const translations = {
  en: {
    'help_on_way': 'Help is on the way!',
    'dashboard': 'Dashboard',
    'request_assistance': 'Request Assistance',
    'track_request': 'Track Current Request',
    'workshops_nearby': 'Workshops Nearby',
    'emergency_sos': 'Emergency SOS',
    'login_with_google': 'Continue with Google',
    'enter_otp': 'Enter OTP',
    'verify': 'Verify',
    'select_role': 'Select Your Role',
    'vehicle_owner': 'Vehicle Owner',
    'mechanic': 'Mechanic',
    'admin': 'Admin',
    'continue': 'Continue',
    'welcome_back': 'Welcome Back',
    'sign_in': 'Sign in to access your account',
    'current_location': 'Current Location',
    'available': 'Available',
    'busy': 'Busy',
    'closed': 'Closed',
    'km_away': 'km away',
    'rating': 'Rating',
    'response_time': 'Response Time',
    'submit_request': 'Submit Request',
    'processing_payment': 'Processing Payment',
    'payment_successful': 'Payment Successful',
    'verify_email': 'Verify Email',
    'complete_google_signin': 'Complete Google Sign-in',
    'google_authentication': 'Google Authentication',
    'check_gmail_otp': 'Check your Gmail for the OTP',
    'otp_sent_to': 'OTP sent to:',
    'enter_6_digit_otp': 'Enter 6-digit OTP',
    'enter_all_digits': 'Enter all 6 digits',
    'ready_to_verify': 'тЬУ Ready to verify',
    'verify_continue': 'Verify & Continue',
    'verifying': 'Verifying...',
    'time_remaining': 'Time remaining:',
    'resend_otp': 'Resend OTP',
    'invalid_otp': 'Please enter a valid 6-digit OTP',
    'email_required': 'Email is required',
    'verification_successful': 'тЬЕ Verification successful!',
    'email_verified_redirecting': 'тЬЕ Email verified! Redirecting to registration...',
    'new_otp_sent': 'ЁЯУз New OTP sent to your email',
    'network_error': 'Network error. Please check your connection and try again.',
    'failed_resend_otp': 'Failed to resend OTP',
    'smart_roadside_assistance': 'Smart Roadside Assistance',
  },
  hi: {
    'help_on_way': 'рдорджрдж рд░рд╛рд╕реНрддреЗ рдореЗрдВ рд╣реИ!',
    'dashboard': 'рдбреИрд╢рдмреЛрд░реНрдб',
    'request_assistance': 'рд╕рд╣рд╛рдпрддрд╛ рдХрд╛ рдЕрдиреБрд░реЛрдз',
    'track_request': 'рд╡рд░реНрддрдорд╛рди рдЕрдиреБрд░реЛрдз рдЯреНрд░реИрдХ рдХрд░реЗрдВ',
    'workshops_nearby': 'рдЖрд╕-рдкрд╛рд╕ рдХреА рд╡рд░реНрдХрд╢реЙрдк',
    'emergency_sos': 'рдЖрдкрд╛рддрдХрд╛рд▓реАрди SOS',
    'login_with_google': 'Google рдХреЗ рд╕рд╛рде рдЬрд╛рд░реА рд░рдЦреЗрдВ',
    'enter_otp': 'OTP рджрд░реНрдЬ рдХрд░реЗрдВ',
    'verify': 'рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ',
    'select_role': 'рдЕрдкрдиреА рднреВрдорд┐рдХрд╛ рдЪреБрдиреЗрдВ',
    'vehicle_owner': 'рд╡рд╛рд╣рди рд╕реНрд╡рд╛рдореА',
    'mechanic': 'рдореИрдХреЗрдирд┐рдХ',
    'admin': 'рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ',
    'continue': 'рдЬрд╛рд░реА рд░рдЦреЗрдВ',
    'welcome_back': 'рд╡рд╛рдкрд╕реА рдкрд░ рд╕реНрд╡рд╛рдЧрдд рд╣реИ',
    'sign_in': 'рдЕрдкрдиреЗ рдЦрд╛рддреЗ рдореЗрдВ рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ',
    'current_location': 'рд╡рд░реНрддрдорд╛рди рд╕реНрдерд╛рди',
    'available': 'рдЙрдкрд▓рдмреНрдз',
    'busy': 'рд╡реНрдпрд╕реНрдд',
    'closed': 'рдмрдВрдж',
    'km_away': 'рдХрд┐рдореА рджреВрд░',
    'rating': 'рд░реЗрдЯрд┐рдВрдЧ',
    'response_time': 'рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд╕рдордп',
    'submit_request': 'рдЕрдиреБрд░реЛрдз рдЬрдорд╛ рдХрд░реЗрдВ',
    'processing_payment': 'рднреБрдЧрддрд╛рди рдкреНрд░рд╕рдВрд╕реНрдХрд░рдг',
    'payment_successful': 'рднреБрдЧрддрд╛рди рд╕рдлрд▓',
    'verify_email': 'рдИрдореЗрд▓ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ',
    'complete_google_signin': 'Google рд╕рд╛рдЗрди-рдЗрди рдкреВрд░рд╛ рдХрд░реЗрдВ',
    'google_authentication': 'Google рдкреНрд░рдорд╛рдгреАрдХрд░рдг',
    'check_gmail_otp': 'OTP рдХреЗ рд▓рд┐рдП рдЕрдкрдирд╛ Gmail рдЬрд╛рдВрдЪреЗрдВ',
    'otp_sent_to': 'OTP рднреЗрдЬрд╛ рдЧрдпрд╛:',
    'enter_6_digit_otp': '6-рдЕрдВрдХреАрдп OTP рджрд░реНрдЬ рдХрд░реЗрдВ',
    'enter_all_digits': 'рд╕рднреА 6 рдЕрдВрдХ рджрд░реНрдЬ рдХрд░реЗрдВ',
    'ready_to_verify': 'тЬУ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░',
    'verify_continue': 'рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ рдФрд░ рдЬрд╛рд░реА рд░рдЦреЗрдВ',
    'verifying': 'рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░ рд░рд╣реЗ рд╣реИрдВ...',
    'time_remaining': 'рд╢реЗрд╖ рд╕рдордп:',
    'resend_otp': 'OTP рдкреБрдирдГ рднреЗрдЬреЗрдВ',
    'invalid_otp': 'рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрдз 6-рдЕрдВрдХреАрдп OTP рджрд░реНрдЬ рдХрд░реЗрдВ',
    'email_required': 'рдИрдореЗрд▓ рдЖрд╡рд╢реНрдпрдХ рд╣реИ',
    'verification_successful': 'тЬЕ рд╕рддреНрдпрд╛рдкрди рд╕рдлрд▓!',
    'email_verified_redirecting': 'тЬЕ рдИрдореЗрд▓ рд╕рддреНрдпрд╛рдкрд┐рдд! рдкрдВрдЬреАрдХрд░рдг рдкрд░ рдкреБрдирд░реНрдирд┐рд░реНрджреЗрд╢рд┐рдд рдХрд░ рд░рд╣реЗ рд╣реИрдВ...',
    'new_otp_sent': 'ЁЯУз рдЖрдкрдХреЗ рдИрдореЗрд▓ рдкрд░ рдирдпрд╛ OTP рднреЗрдЬрд╛ рдЧрдпрд╛',
    'network_error': 'рдиреЗрдЯрд╡рд░реНрдХ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдХрдиреЗрдХреНрд╢рди рдЬрд╛рдВрдЪреЗрдВ рдФрд░ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред',
    'failed_resend_otp': 'OTP рдкреБрдирдГ рднреЗрдЬрдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓',
    'smart_roadside_assistance': 'рд╕реНрдорд╛рд░реНрдЯ рд░реЛрдбрд╕рд╛рдЗрдб рд╕рд╣рд╛рдпрддрд╛',
  },
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

interface LanguageProviderProps {
  children: ReactNode;
}

export const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('en');

  const t = (key: string): string => {
    return translations[language][key as keyof typeof translations.en] || key;
  };

  const value = {
    language,
    setLanguage,
    t,
  };

  return <LanguageContext.Provider value={value}>{children}</LanguageContext.Provider>;
};
